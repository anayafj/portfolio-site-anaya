/** DOUBLECLICK CORE FUNCTIONS
 ********************************************************************************************/


/** PRE INIT **********************************************/
function initVendor () {
    // init DoubleClick
    if ( Enabler.isInitialized() ) vendorReady();
    else Enabler.addEventListener ( studio.events.StudioEvent.INIT, vendorReady );
}

/** INIT *************************************************/
function vendorReady () {
    console.info ('DOUBLECLICK API INITIALIZING');

    // polite load
    if ( Enabler.isPageLoaded() ) pageLoadedHandler();
    else Enabler.addEventListener (studio.events.StudioEvent.PAGE_LOADED, pageLoadedHandler);
}

/** PAGE LOADED *****************************************/
function pageLoadedHandler () {
    if ( Enabler.isVisible() ) adVisible();
    else Enabler.addEventListener (studio.events.StudioEvent.VISIBLE, adVisible);
}

/** AD VISIBLE *****************************************/
function adVisible () {
    // ad visible ... dispatch READY event
    dispatchEvent (BLT.Events.AD_READY);
}

/** DC VIDEO PLAYER
 ********************************************************************************************/

var BLT = BLT || {};
BLT.Video = BLT.Video || {};

var $videoArray = [],
    $videoGroups = {},
    $vidPlayer = undefined,
    $currID = undefined,
    $currTuneIn = undefined,
    $currReportingID,
    $isPlaying = false,
    $autoPlay = false
    ;


/** INIT
 ********************************************************************************************/
BLT.Video.init = function (vidElement) {
    $vidPlayer = vidElement;
    BLT.Video.checkInit(); // error check

    BLT.Video.addListeners();

    // determine current group ID based on TuneIn
    var tuneinID = BLT.Tunein.currentID;
    tuneinID === undefined ? $currTuneIn = 'default' : $currTuneIn = tuneinID;
};


/** ADD LISTENERS
 ********************************************************************************************/
BLT.Video.addListeners = function () {
    // ad events
    addEventListener ('collapseAd', BLT.Video.handleEvents);
    addEventListener ('parseDates', BLT.Video.handleEvents);
    addEventListener ('pauseVideo', BLT.Video.handleEvents);
    addEventListener ('playVideo', BLT.Video.handleEvents);
    addEventListener ('replayVideo', BLT.Video.handleEvents);
    addEventListener ('videoPlaying', BLT.Video.handleEvents);
    addEventListener ('killVideo', BLT.Video.handleEvents);
    addEventListener ('muteVideo', BLT.Video.handleEvents);
    addEventListener ('unmuteVideo', BLT.Video.handleEvents);

    // video events
    $vidPlayer.addEventListener ('timeupdate', BLT.Video.handleProgress);
    $vidPlayer.addEventListener ('canplay', BLT.Video.handleEvents);
    $vidPlayer.addEventListener ('ended', BLT.Video.handleEvents);
    $vidPlayer.addEventListener ('loadedmetadata', BLT.Video.handleEvents);

    // FULL SCREEN METHODS
    addEventListener ('showFullscreen', BLT.Video.handleEvents);
    addEventListener ('exitFullscreen', BLT.Video.handleEvents);

    // FULL SCREEN EXIT DETECTION
    addEventListener ('webkitfullscreenchange', BLT.Video.onExitFSHandler, false);
    addEventListener ('mozfullscreenchange', BLT.Video.onExitFSHandler, false);
    addEventListener ('fullscreenchange', BLT.Video.onExitFSHandler, false);
    addEventListener ('MSFullscreenChange', BLT.Video.onExitFSHandler, false);
};


/** HANDLE EVENTS
 ********************************************************************************************/
BLT.Video.handleEvents = function (event) {
    switch (event.type) {
        case 'collapseAd':
            dispatchEvent (BLT.Events.KILL_VIDEO);
            break;
        case 'parseDates':
            BLT.Video.sortGroups();
            break;
        case 'pauseVideo':
            BLT.Video.pauseVideo();
            break;
        case 'playVideo':
            BLT.Video.playVideo();
            break;
        case 'replayVideo':
            BLT.Video.replayVideo();
            break;
        case 'muteVideo':
            BLT.Video.toggleMute(true);
            break;
        case 'unmuteVideo':
            BLT.Video.toggleMute(false);
            break;
        case 'killVideo':
            BLT.Video.killVideo();
            break;
        case 'showFullscreen':
            BLT.Video.showFullScreen();
            break;
        case 'hideFullscreen':
            BLT.Video.exitFullScreen();
            break;
        case 'canplay':
            dispatchEvent (BLT.Events.VIDEO_READY);
            break;
        case 'ended':
            $isPlaying = false;
            dispatchEvent (BLT.Events.VIDEO_COMPLETE);
            BLT.Video.exitFullScreen();
            break;
        case 'loadedmetadata':
            BLT.Video.checkSize();
            break;
    }
};

/** HANDLE PROGRESS
 ********************************************************************************************/
BLT.Video.handleProgress = function (event) {
    var duration = $vidPlayer.duration;
    var currTime = $vidPlayer.currentTime;
    var perc = ((currTime/duration) *100).toFixed(2);

    if (perc >= 75 && perc <= 76) {
        console.log ('3RD QUARTILE');
        dispatchEvent (BLT.Events.VIDEO_75_PERCENT);
    }
    else if (perc >= 50 && perc <= 51) {
        console.log ('MIDPOINT');
        dispatchEvent (BLT.Events.VIDEO_50_PERCENT);
    }
    else if (perc >= 25 && perc <= 26) {
        console.log ('1ST QUARTILE');
        dispatchEvent (BLT.Events.VIDEO_25_PERCENT);
    }
};


/** ADD VIDEO
 ********************************************************************************************/
BLT.Video.addVideo = function (sourcePath, groupID, reportingID) {
    BLT.Video.checkInit(); // error check

    // create video object
    var videoObj = {};
    videoObj.source = sourcePath;
    videoObj.groupID = groupID;
    videoObj.reportingID = reportingID;

    // add to $videoArray
    $videoArray.push (videoObj);

    // rebuild $videoGroups
    BLT.Video.sortGroups();
};


/** SORT GROUPS
 ********************************************************************************************/
BLT.Video.sortGroups = function () {
    // rebuld $videoGroups from $videoArray
    $videoGroups = {};

    for (var i in $videoArray) {
        var videoObj = ($videoArray[i]);

        // check if tuneIn is used, if not, add to a 'default' group
        var groupID = videoObj.groupID;
        $currTuneIn = BLT.Tunein.currentID;

        if ($currTuneIn === undefined) {
            $currTuneIn = 'default';
            groupID = 'default';
        }

        // check if group exists in $videoGroups; if not create the group object
        if ($videoGroups.hasOwnProperty(groupID) === false) {
            $videoGroups[groupID] = [];
        }

        $videoGroups[groupID].push (videoObj);
    }
};


/** LOAD VIDEO
 ********************************************************************************************/
BLT.Video.loadVideo = function (videoID, controlType, isMuted) {
    BLT.Video.checkInit(); // error check

    // dispose any previous video instances
    BLT.Video.killVideo();

    var sourceVideo = $videoGroups[$currTuneIn][videoID].source;
    $currID = videoID;
    $currReportingID = $videoGroups[$currTuneIn][videoID].reportingID;

    // mp4 video
    srcNode = document.createElement ('source');
    srcNode.setAttribute ('type', 'video/mp4');
    srcNode.setAttribute ('src', Enabler.getUrl (sourceVideo + '.mp4'));
    $vidPlayer.appendChild (srcNode);

    // webm video
    // var srcNode = document.createElement ('source');
    // srcNode.setAttribute ('type', 'video/webm');
    // srcNode.setAttribute ('src', Enabler.getUrl (sourceVideo + '.webm'));
    // $vidPlayer.appendChild (srcNode);

    // initially remove controls
    $vidPlayer.removeAttribute ("controls");
    dispatchEvent (BLT.Events.HIDE_CONTROLS);

    // if adding controls, determine what type
    if (controlType === 'default') $vidPlayer.setAttribute ("controls", "controls");
    else if (controlType === 'custom') BLT.VideoControls.initControls ($vidPlayer);

    // set autoplay
    if ($autoPlay === true) $vidPlayer.setAttribute ("autoplay", $autoPlay);
    else $vidPlayer.removeAttribute ("autoplay");

    // handle muting
    if (isMuted === undefined) isMuted = false;
    BLT.Video.toggleMute (isMuted);

    // DC TRACKING
    Enabler.loadModule(studio.module.ModuleId.VIDEO, function() {
        studio.video.Reporter.attach ($currReportingID, $vidPlayer);
    });

    $vidPlayer.load();

    if ($autoPlay === true) {
        $autoPlay = false;
        $isPlaying = true;
        console.info("LOAD AND PLAY -----  END ");
        $vidPlayer.play ();
        dispatchEvent (BLT.Events.VIDEO_PLAYING);
    }
};


/** LOAD & PLAY VIDEO
 ********************************************************************************************/
BLT.Video.loadPlayVideo = function (videoID, controlType, isMuted) {
    $autoPlay = true;
    BLT.Video.loadVideo (videoID, controlType, isMuted);
};


/** PLAY VIDEO
 ********************************************************************************************/
BLT.Video.playVideo = function () {
    $vidPlayer.play ();
    $isPlaying = true;
    dispatchEvent (BLT.Events.VIDEO_PLAYING);
};


/** PAUSE VIDEO
 ********************************************************************************************/
BLT.Video.pauseVideo = function () {
    $vidPlayer.pause ();
    $isPlaying = false;
    dispatchEvent (BLT.Events.VIDEO_PAUSED);
};

/** REPLAY VIDEO
 ********************************************************************************************/
BLT.Video.replayVideo = function () {
    $vidPlayer.pause ();
    $vidPlayer.currentTime = 0;
    $vidPlayer.play ();
    $isPlaying = true;
    dispatchEvent (BLT.Events.VIDEO_PLAYING);
};


/** KILL VIDEO
 ********************************************************************************************/
BLT.Video.killVideo = function () {
    console.log ('KILL VIDEO');
    if ($isPlaying == true) $vidPlayer.pause();
    $isPlaying = false;
    while ($vidPlayer.firstChild) {
        $vidPlayer.removeChild ($vidPlayer.firstChild);
    }
};


/** TOGGLE MUTE
 ********************************************************************************************/
BLT.Video.toggleMute = function (muteState) {
    $vidPlayer.muted = muteState;

    if (muteState === true) dispatchEvent (BLT.Events.VIDEO_MUTED);
    else dispatchEvent (BLT.Events.VIDEO_UNMUTED);
};


/** CHECK VIDEO SIZE
 ********************************************************************************************/
BLT.Video.checkSize = function() {
    // check if video can play in IE
    if ($vidPlayer.videoWidth > 1920 || $vidPlayer.videoHeight > 1080) {
        console.error("<<< VIDEO EXCEEDS MAXIMUM SIZE FOR IE (1920x1088) >>>");
        console.error(" <<< RESIZE THE VIDEO WITHIN SPEC FOR IE SUPPORT >>>");
    }
};



/** SHOW FULLSCREEN METHOD
 ********************************************************************************************/
BLT.Video.showFullScreen = function() {
    if (document.requestFullscreen)             document.requestFullscreen();
    else if (document.mozRequestFullScreen)     document.mozRequestFullScreen();
    else if (document.webkitRequestFullscreen)  document.webkitRequestFullscreen();
    else if (document.msRequestFullscreen)      document.msRequestFullscreen();

    dispatchEvent (BLT.Events.VIDEO_FULLSCREEN_OPENED);
};


/** EXIT FULLSCREEN METHOD
 ********************************************************************************************/
BLT.Video.exitFullScreen = function() {
    // cross browser exit fullscreen helper
    if (document.exitFullscreen)                document.exitFullscreen();
    else if (document.mozCancelFullScreen)      document.mozCancelFullScreen();
    else if (document.webkitCancelFullScreen)   document.webkitCancelFullScreen();
    else if (document.msExitFullscreen)         document.msExitFullscreen();
};


/** EXIT FULLSCREEN CALLBACK
 ********************************************************************************************/
BLT.Video.onExitFSHandler = function(e)
{
    // run when fullscreen is exited
    if (document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement === false)
    {
        dispatchEvent (BLT.Events.VIDEO_FULLSCREEN_CLOSED);
    }
};


/** ERROR CHECKING
 ********************************************************************************************/
BLT.Video.checkInit = function () {
    if ($vidPlayer === undefined) {
        throw "Video Element not defined. Please use BLT.Video.init () to pass the video element prior to using the video player."
    }
};

var BLT = BLT || {};

BLT.initFramework = function () {
    console.info ('BLT AD FRAMEWORK : version 1.4');
};

// startup
window.onload = BLT.initFramework();


/** FRAMEWORK DEPENDENCIES
 **********************************************************/

/** BLT EVENTS
 **********************************************************/

// polyfill fix for IE (adds custom events to IE)
(function () {
    function CustomEvent ( event, params ) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent ( 'CustomEvent' );
        evt.initCustomEvent ( event, params.bubbles, params.cancelable, params.detail );
        return evt;
    }

    CustomEvent.prototype = window.Event.prototype;
    window.CustomEvent = CustomEvent;
})();


BLT.Events = {

    /** AD EVENTS
     *************************************************************/
    AD_READY:                   new CustomEvent ('adReady'),
    PARSE_DATES:                new CustomEvent ('parseDates')

};


/** BLT TUNEIN CLASS
 **********************************************************/

BLT.Tunein = BLT.Tunein || {};

BLT.Tunein.dates = [];
BLT.Tunein.today = new Date();
BLT.Tunein.currentTunein = new Date();
BLT.Tunein.currentID = undefined;
BLT.Tunein.isProxy = false;


BLT.Tunein.addDate = function (year, month, day, id ) {
    if (!BLT.Tunein.dates) BLT.Tunein.dates = [];
    var date = new Date (year, month -1, day);
    date.id = id;
    BLT.Tunein.dates.push (date);
};


BLT.Tunein.parseDates = function (year, month, day ) {
    if (BLT.Tunein.errorCheck()) return;

    BLT.Tunein.isProxy = false;

    // if date value for comparison if passed (for testing)
    if (year && month && day) {
        // will use proxy date for testing
        BLT.Tunein.today = new Date (year, month -1, day);
        BLT.Tunein.isProxy = true;
    }

    BLT.Tunein.sortDec (BLT.Tunein.dates);
    BLT.Tunein.currentTunein = BLT.Tunein.today;
    BLT.Tunein.currentID = 'default';

    // determine correct Tunein
    for (var i in BLT.Tunein.dates) {
        if (BLT.Tunein.today >= BLT.Tunein.dates[i]) {
            BLT.Tunein.currentID = BLT.Tunein.dates[i].id;
            BLT.Tunein.currentTunein = BLT.Tunein.dates[i];
            break;
        }
    }

    dispatchEvent (BLT.Events.PARSE_DATES);

    // display the results
    BLT.Tunein.displayCurrentDate();
};


// sort date array ascending
BLT.Tunein.sortAsc = function (dateArray) {
    dateArray.sort (function (a, b) {
        a = new Date ( a.getTime() );
        b = new Date ( b.getTime() );
        return a < b ? -1 : a > b ? 1 : 0;
    });
};


// sort date array descending
BLT.Tunein.sortDec = function (dateArray) {
    dateArray.sort (function (a, b) {
        a = new Date ( a.getTime() );
        b = new Date ( b.getTime() );
        return a > b ? -1 : a < b ? 1 : 0;
    });
};


/** CONSOLE LOG FOR TESTING **/
// displays all dates in the console window (for testing)
BLT.Tunein.displayDates = function () {
    if (BLT.Tunein.errorCheck()) return;

    var revDates = BLT.Tunein.dates.slice(0); // clone
    BLT.Tunein.sortAsc (revDates);

    for (var x in revDates) {
        console.info ( revDates[x].id, '--> ', revDates[x].toLocaleDateString() );
    }

    // display the results
    BLT.Tunein.displayCurrentDate();
};


// displays current dates in console window (for testing)
BLT.Tunein.displayCurrentDate = function () {
    var outputString;
    BLT.Tunein.isProxy ? outputString = 'CURRENT TUNEIN (USING PROXY):' : outputString = 'CURRENT TUNEIN:';

    console.info (outputString, BLT.Tunein.currentID, '-->', BLT.Tunein.currentTunein.toLocaleDateString() );
};


// ERROR CHECKING
BLT.Tunein.errorCheck = function () {
    if (BLT.Tunein.dates.length === 0) {
        console.info ('<<< Tunein cannot be parsed. Use BLT.Tunein.addDate to add date values');
        return 1;
    }
    else return 0; // no error
};



/** BLT HELPER METHODS
 **********************************************************/

/** LOAD EXTERNAL JAVASCRIPT **/
var loadScript = function (scriptURL, callback)  {
    var script = document.createElement("script");
    script.type = "text/javascript";

    if (script.readyState){  // IE, incl. IE9
        script.onreadystatechange = function(){
            if (script.readyState === "loaded" || script.readyState === "complete"){
                script.onreadystatechange = null;
                callback();
            }
        };
    } else {  // others
        script.onload = callback;
    }

    script.src = scriptURL;
    document.body.appendChild (script);
};


/** ADD CLASS **/
var addClass = function ($el, className) {
    $el.classList.add(className);
};


/** REMOVE CLASS **/
var removeClass = function (element, className) {
    $el.classList.remove(className);
};


/** GET ELEMENT **/
var getEl = function ($id) {
    return document.getElementById ($id);
};


/** SHOW ELEMENT **/
var show = function ($element) {
    $element.style.display = 'block';
};


/** HIDE ELEMENT **/
var hide = function ($element) {
    $element.style.display = 'none';
};


/** DEVICE DETECTION **/
var getDevice = (function () {
    var ua     = navigator.userAgent.toLowerCase();
    var detect = (function (s) {
        if (typeof (s) === 'undefined') {
            s = ua;
        } else {
            ua = s.toLowerCase();
        }
        if (/(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(ua)) {
            return 'tablet';
        } else if (/(mobi|ipod|phone|blackberry|opera mini|fennec|minimo|symbian|psp|nintendo ds|archos|skyfire|puffin|blazer|bolt|gobrowser|iris|maemo|semc|teashark|uzard)/.test(ua)) {
            return 'phone';
        } else {
            return 'desktop';
        }
    });
    var device = detect();
    return {
        detect     : detect,
        device     : device,
        isMobile   : (device !== 'desktop'),
        isTablet   : (device === 'tablet'),
        isDestktop : (device === 'desktop'),
        userAgent  : ua
    };
}());


var AD = AD || {};

var $ad             = getEl ('adContainer');
var $lockup         = getEl ('dateLockup');
var $date           = getEl ('date');
var $logo           = getEl ('hbomax');
var $tag            = getEl ('tag');
var $tt             = getEl ('tt');
var $ttBlur         = getEl ('ttBlur');
var $bg             = getEl ('bg');
var $rainBG         = getEl ('rainBG');
var $card1          = getEl ('card1');
var $card2          = getEl ('card2');
var $drop1          = getEl ('drop1');
var $drop2          = getEl ('drop2');
var $drop3          = getEl ('drop3');

/** INITIALIZE AD
 *******************************************************************/
AD.initAd = function () {
    AD.addListeners();
    AD.setupAnimation();

    AD.checkDate();

    // INITIALIZE THE AD VENDOR API
    initVendor();
};


/** SETUP LISTENERS
 *******************************************************************/
AD.addListeners = function () {
    // ad events
    addEventListener ('adReady', AD.adReady);
    $ad.addEventListener('click', AD.clickHandler)
};

AD.clickHandler = function (event) {
    console.log('BLT CLICK:', event.currentTarget.id);
    Enabler.exit ('main exit');
};

/** AD READY -- CALLED ONCE VENDOR API IS READY (EVENT DISPATCHED)
 *******************************************************************/
AD.adReady = function() {
    console.info ('AD READY');
    show($ad);
    tl.play();
    // tl.play('key');
};

/** ANIMATION SETUP
 *******************************************************************/
var tl = new TimelineLite({paused:true});

AD.setupAnimation = function() {
    tl.addLabel("start", 0);
    tl.addLabel("card2", 5);
    tl.addLabel("key", 10);
    tl.addLabel("lockup", 13);
    tl.addLabel("end", 15);
    // ease: Power1.easeIn

    tl.to($rainBG, 15,{y: -160, ease: Linear.easeNone}, "start");

    // card 1
    tl.from($drop1, 3,{y: -136, ease: Power4.easeInOut}, "start+=.5");
    tl.from($card1, 3,{opacity: 0, scale: 0.6, rotation: .001, ease: Power1.easeIn}, "start");
    tl.to($card1, 4,{scale: 1.1, rotation: .001, ease: Linear.easeNone}, "start+=1");
    tl.to($card1, 2,{opacity: 0, ease: Power4.easeOut}, "card2-=1");

    // card 2
    tl.from($drop2, 5,{y: -136, ease: Power4.easeInOut}, "card2+=.5");
    tl.from($drop3, 5,{y: -136, ease: Power4.easeInOut}, "card2+=1.5");
    tl.from($card2, 3,{opacity: 0, scale: 0.6, rotation: .001, ease: Power1.easeIn}, "card2");
    tl.to($card2, 4,{scale: 1.1, rotation: .001, ease: Linear.easeNone}, "card2+=1");
    tl.to($card2, 2,{opacity: 0, ease: Power4.easeOut}, "key-=1");

    tl.to($rainBG, 3,{opacity: 0, ease: Linear.easeNone}, "key");
    tl.from($bg, 4,{opacity: 0, scale: 1.4, ease: Power1.easeOut}, "key");
    tl.from($tt, 4,{scale: 1.4, ease: Power1.easeOut}, "key");
    tl.from($ttBlur, 4,{scale: 1.4, ease: Power1.easeOut}, "key");
    tl.to($ttBlur, 2,{opacity: 1, ease: Power1.easeOut}, "key");
    tl.to($tt, 2,{opacity: 1, ease: Power1.easeOut}, "key+=2");
    tl.to($ttBlur, 2,{opacity: 0, ease: Power1.easeOut}, "key+=2");

       
    tl.from($lockup, 2,{autoAlpha: 0, ease: Power1.easeOut}, "lockup");
    tl.from($logo, 1.5,{ x: "-=8", rotation: .001,  ease: Power1.easeOut }, "lockup");
    tl.from($date, 1.5,{ x: "+=7", rotation: .001, ease: Power1.easeOut }, "lockup");
    tl.from($tag, 2,{ opacity: 0, ease: Power1.easeOut }, "lockup");

};


//////////////////////////////////////////////////////////////////////////////
///// Date Code ---------------

AD.checkDate = function () {
    BLT.Tunein.addDate (2020, 10, 25, 'tonight');
    BLT.Tunein.addDate (2020, 10, 26, 'now');

    BLT.Tunein.parseDates ();
    // BLT.Tunein.parseDates (2020, 10, 25); // USE TO TEST DATES

    switch (BLT.Tunein.currentID) {

        case 'now':
            addClass(date, 'date3');
            break;

        case 'tonight':
            addClass(date, 'date2');
            break;

        default:
            break;
    }
};



/** STARTUP
 *******************************************************************/
window.load = AD.initAd();


//# sourceMappingURL=../main.min.js.map
