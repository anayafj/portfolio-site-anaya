/** DOUBLECLICK CORE FUNCTIONS
 ********************************************************************************************/

var isExpanded = false;

/** PRE INIT **********************************************/
function initVendor () {
    // init DoubleClick
    if ( Enabler.isInitialized() ) vendorReady();
    else Enabler.addEventListener ( studio.events.StudioEvent.INIT, vendorReady );
}

/** INIT *************************************************/
function vendorReady () {
    // console.info ('DOUBLECLICK API INITIALIZING');
    addListeners ();

    // polite load
    if ( Enabler.isPageLoaded() ) pageLoadedHandler();
    else Enabler.addEventListener (studio.events.StudioEvent.PAGE_LOADED, pageLoadedHandler);
}

/** PAGE LOADED *****************************************/
function pageLoadedHandler () {
    if ( Enabler.isVisible() ) adVisible();
    else Enabler.addEventListener (studio.events.StudioEvent.VISIBLE, adVisible);
}

/** AD VISIBLE *****************************************/
function adVisible () {
    // ad visible ... dispatch READY event
    dispatchEvent (BLT.Events.AD_READY);
}

/** LISTENERS *****************************************/
function addListeners () {
    // AD events
    addEventListener ('expandAd', onExpandRequest);
    addEventListener('expandAdDone', onExpandAdDone);
    addEventListener ('collapseAd', onCollapseAd);
    addEventListener ('collapseAdDone', onCollapseAdDone);

    // DoubleClick events
    Enabler.addEventListener (studio.events.StudioEvent.EXPAND_START, expandStartHandler);
    Enabler.addEventListener (studio.events.StudioEvent.EXPAND_FINISH, expandFinishHandler);
    Enabler.addEventListener (studio.events.StudioEvent.COLLAPSE_START, collapseStartHandler);
    Enabler.addEventListener (studio.events.StudioEvent.COLLAPSE_FINISH, collapseFinishHandler);
    Enabler.addEventListener (studio.events.StudioEvent.EXIT, onExitHandler);
}


/***********************************************************************************************
 * EXPAND METHODS
 **********************************************************************************************/

function onExpandRequest (event) {
    // console.info ('DC_CORE: onExpandAd');
    Enabler.requestExpand ();
    Enabler.startTimer ('Panel Expansion');
}

function onExpandAdDone (event){
    // console.info ('DC_CORE: onExpandAdDone');
    isExpanded = true;
    Enabler.finishExpand();
}

function expandStartHandler (event) {
    // console.info ('DC_CORE: expand start');
    dispatchEvent (BLT.Events.EXPAND_READY);
}

function expandFinishHandler (event) {
    // console.info ('DC_CORE: expand end');
    dispatchEvent (BLT.Events.EXPAND_FINISHED);
}


/***********************************************************************************************
 * COLLAPSE METHODS
 **********************************************************************************************/

function onCollapseAd (event) {
    // console.info ('DC_CORE: onCollapseAd');

    isExpanded = false;
    Enabler.requestCollapse ();
    Enabler.stopTimer ('Panel Expansion');

}

function onCollapseAdDone (event) {
    // console.info('DC_CORE: onCollapseAdDone');
    Enabler.finishCollapse ();
}

function collapseStartHandler (event) {
    // console.info ('DC_CORE: collapse start');
    dispatchEvent (BLT.Events.COLLAPSE_READY);
}

function collapseFinishHandler (event) {
    // console.info ('DC_CORE: collapse end');
    dispatchEvent (BLT.Events.COLLAPSE_FINISHED);
}


/***********************************************************************************************
 * CLOSE METHOD
 **********************************************************************************************/
// function onCloseAd (event) {
//     // console.info ('DC_CORE: onCloseAd');
//
//     isExpanded = false;
//     Enabler.close();
//     Enabler.reportManualClose ();
// }


/***********************************************************************************************
 * EXIT CLEANUP
 **********************************************************************************************/
function onExitHandler (event) {
    console.info("ON EXIT HANDLER - DC Core");

    dispatchEvent(BLT.Events.AD_EXIT);

    // dispatchEvent (BLT.Events.KILL_VIDEO);
    // if (isExpanded) dispatchEvent (BLT.Events.COLLAPSE_AD);
}

/** DC VIDEO PLAYER
 ********************************************************************************************/

var BLT = BLT || {};
BLT.Video = BLT.Video || {};

var $videoArray = [],
    $videoGroups = {},
    $vidPlayer = undefined,
    $currID = undefined,
    $currTuneIn = undefined,
    $currReportingID,
    $isPlaying = false,
    $autoPlay = false
    ;


/** INIT
 ********************************************************************************************/
BLT.Video.init = function (vidElement) {
    $vidPlayer = vidElement;
    BLT.Video.checkInit(); // error check

    BLT.Video.addListeners();

    // determine current group ID based on TuneIn
    var tuneinID = BLT.Tunein.currentID;
    tuneinID === undefined ? $currTuneIn = 'default' : $currTuneIn = tuneinID;
};


/** ADD LISTENERS
 ********************************************************************************************/
BLT.Video.addListeners = function () {
    // ad events
    addEventListener ('collapseAd', BLT.Video.handleEvents);
    addEventListener ('parseDates', BLT.Video.handleEvents);
    addEventListener ('pauseVideo', BLT.Video.handleEvents);
    addEventListener ('playVideo', BLT.Video.handleEvents);
    addEventListener ('replayVideo', BLT.Video.handleEvents);
    addEventListener ('videoPlaying', BLT.Video.handleEvents);
    addEventListener ('killVideo', BLT.Video.handleEvents);
    addEventListener ('muteVideo', BLT.Video.handleEvents);
    addEventListener ('unmuteVideo', BLT.Video.handleEvents);

    // video events
    $vidPlayer.addEventListener ('timeupdate', BLT.Video.handleProgress);
    $vidPlayer.addEventListener ('canplay', BLT.Video.handleEvents);
    $vidPlayer.addEventListener ('ended', BLT.Video.handleEvents);
    $vidPlayer.addEventListener ('loadedmetadata', BLT.Video.handleEvents);

    // FULL SCREEN METHODS
    addEventListener ('showFullscreen', BLT.Video.handleEvents);
    addEventListener ('exitFullscreen', BLT.Video.handleEvents);

    // FULL SCREEN EXIT DETECTION
    addEventListener ('webkitfullscreenchange', BLT.Video.onExitFSHandler, false);
    addEventListener ('mozfullscreenchange', BLT.Video.onExitFSHandler, false);
    addEventListener ('fullscreenchange', BLT.Video.onExitFSHandler, false);
    addEventListener ('MSFullscreenChange', BLT.Video.onExitFSHandler, false);
};


/** HANDLE EVENTS
 ********************************************************************************************/
BLT.Video.handleEvents = function (event) {
    switch (event.type) {
        case 'collapseAd':
            dispatchEvent (BLT.Events.KILL_VIDEO);
            break;
        case 'parseDates':
            BLT.Video.sortGroups();
            break;
        case 'pauseVideo':
            BLT.Video.pauseVideo();
            break;
        case 'playVideo':
            BLT.Video.playVideo();
            break;
        case 'replayVideo':
            BLT.Video.replayVideo();
            break;
        case 'muteVideo':
            BLT.Video.toggleMute(true);
            break;
        case 'unmuteVideo':
            BLT.Video.toggleMute(false);
            break;
        case 'killVideo':
            BLT.Video.killVideo();
            break;
        case 'showFullscreen':
            BLT.Video.showFullScreen();
            break;
        case 'hideFullscreen':
            BLT.Video.exitFullScreen();
            break;
        case 'canplay':
            dispatchEvent (BLT.Events.VIDEO_READY);
            break;
        case 'ended':
            $isPlaying = false;
            dispatchEvent (BLT.Events.VIDEO_COMPLETE);
            BLT.Video.exitFullScreen();
            break;
        case 'loadedmetadata':
            BLT.Video.checkSize();
            break;
    }
};

/** HANDLE PROGRESS
 ********************************************************************************************/
BLT.Video.handleProgress = function (event) {
    var duration = $vidPlayer.duration;
    var currTime = $vidPlayer.currentTime;
    var perc = ((currTime/duration) *100).toFixed(2);

    if (perc >= 75 && perc <= 76) {
        console.log ('3RD QUARTILE');
        dispatchEvent (BLT.Events.VIDEO_75_PERCENT);
    }
    else if (perc >= 50 && perc <= 51) {
        console.log ('MIDPOINT');
        dispatchEvent (BLT.Events.VIDEO_50_PERCENT);
    }
    else if (perc >= 25 && perc <= 26) {
        console.log ('1ST QUARTILE');
        dispatchEvent (BLT.Events.VIDEO_25_PERCENT);
    }
};


/** ADD VIDEO
 ********************************************************************************************/
BLT.Video.addVideo = function (sourcePath, groupID, reportingID) {
    BLT.Video.checkInit(); // error check

    // create video object
    var videoObj = {};
    videoObj.source = sourcePath;
    videoObj.groupID = groupID;
    videoObj.reportingID = reportingID;

    // add to $videoArray
    $videoArray.push (videoObj);

    // rebuild $videoGroups
    BLT.Video.sortGroups();
};


/** SORT GROUPS
 ********************************************************************************************/
BLT.Video.sortGroups = function () {
    // rebuld $videoGroups from $videoArray
    $videoGroups = {};

    for (var i in $videoArray) {
        var videoObj = ($videoArray[i]);

        // check if tuneIn is used, if not, add to a 'default' group
        var groupID = videoObj.groupID;
        $currTuneIn = BLT.Tunein.currentID;

        if ($currTuneIn === undefined) {
            $currTuneIn = 'default';
            groupID = 'default';
        }

        // check if group exists in $videoGroups; if not create the group object
        if ($videoGroups.hasOwnProperty(groupID) === false) {
            $videoGroups[groupID] = [];
        }

        $videoGroups[groupID].push (videoObj);
    }
};


/** LOAD VIDEO
 ********************************************************************************************/
BLT.Video.loadVideo = function (videoID, controlType, isMuted) {
    BLT.Video.checkInit(); // error check

    // dispose any previous video instances
    BLT.Video.killVideo();

    var sourceVideo = $videoGroups[$currTuneIn][videoID].source;
    $currID = videoID;
    $currReportingID = $videoGroups[$currTuneIn][videoID].reportingID;

    // mp4 video
    srcNode = document.createElement ('source');
    srcNode.setAttribute ('type', 'video/mp4');
    srcNode.setAttribute ('src', Enabler.getUrl (sourceVideo + '.mp4'));
    $vidPlayer.appendChild (srcNode);

    // webm video
    // var srcNode = document.createElement ('source');
    // srcNode.setAttribute ('type', 'video/webm');
    // srcNode.setAttribute ('src', Enabler.getUrl (sourceVideo + '.webm'));
    // $vidPlayer.appendChild (srcNode);

    // initially remove controls
    $vidPlayer.removeAttribute ("controls");
    dispatchEvent (BLT.Events.HIDE_CONTROLS);

    // if adding controls, determine what type
    if (controlType === 'default') $vidPlayer.setAttribute ("controls", "controls");
    else if (controlType === 'custom') BLT.VideoControls.initControls ($vidPlayer);

    // set autoplay
    if ($autoPlay === true) $vidPlayer.setAttribute ("autoplay", $autoPlay);
    else $vidPlayer.removeAttribute ("autoplay");

    // handle muting
    if (isMuted === undefined) isMuted = false;
    BLT.Video.toggleMute (isMuted);

    // DC TRACKING
    Enabler.loadModule(studio.module.ModuleId.VIDEO, function() {
        studio.video.Reporter.attach ($currReportingID, $vidPlayer);
    });

    $vidPlayer.load();

    if ($autoPlay === true) {
        $autoPlay = false;
        $isPlaying = true;
        console.info("LOAD AND PLAY -----  END ");
        $vidPlayer.play ();
        dispatchEvent (BLT.Events.VIDEO_PLAYING);
    }
};


/** LOAD & PLAY VIDEO
 ********************************************************************************************/
BLT.Video.loadPlayVideo = function (videoID, controlType, isMuted) {
    $autoPlay = true;
    BLT.Video.loadVideo (videoID, controlType, isMuted);
};


/** PLAY VIDEO
 ********************************************************************************************/
BLT.Video.playVideo = function () {
    $vidPlayer.play ();
    $isPlaying = true;
    dispatchEvent (BLT.Events.VIDEO_PLAYING);
};


/** PAUSE VIDEO
 ********************************************************************************************/
BLT.Video.pauseVideo = function () {
    $vidPlayer.pause ();
    $isPlaying = false;
    dispatchEvent (BLT.Events.VIDEO_PAUSED);
};

/** REPLAY VIDEO
 ********************************************************************************************/
BLT.Video.replayVideo = function () {
    $vidPlayer.pause ();
    $vidPlayer.currentTime = 0;
    $vidPlayer.play ();
    $isPlaying = true;
    dispatchEvent (BLT.Events.VIDEO_PLAYING);
};


/** KILL VIDEO
 ********************************************************************************************/
BLT.Video.killVideo = function () {
    console.log ('KILL VIDEO');
    if ($isPlaying == true) $vidPlayer.pause();
    $isPlaying = false;
    while ($vidPlayer.firstChild) {
        $vidPlayer.removeChild ($vidPlayer.firstChild);
    }
};


/** TOGGLE MUTE
 ********************************************************************************************/
BLT.Video.toggleMute = function (muteState) {
    $vidPlayer.muted = muteState;

    if (muteState === true) dispatchEvent (BLT.Events.VIDEO_MUTED);
    else dispatchEvent (BLT.Events.VIDEO_UNMUTED);
};


/** CHECK VIDEO SIZE
 ********************************************************************************************/
BLT.Video.checkSize = function() {
    // check if video can play in IE
    if ($vidPlayer.videoWidth > 1920 || $vidPlayer.videoHeight > 1080) {
        console.error("<<< VIDEO EXCEEDS MAXIMUM SIZE FOR IE (1920x1088) >>>");
        console.error(" <<< RESIZE THE VIDEO WITHIN SPEC FOR IE SUPPORT >>>");
    }
};



/** SHOW FULLSCREEN METHOD
 ********************************************************************************************/
BLT.Video.showFullScreen = function() {
    if (document.requestFullscreen)             document.requestFullscreen();
    else if (document.mozRequestFullScreen)     document.mozRequestFullScreen();
    else if (document.webkitRequestFullscreen)  document.webkitRequestFullscreen();
    else if (document.msRequestFullscreen)      document.msRequestFullscreen();

    dispatchEvent (BLT.Events.VIDEO_FULLSCREEN_OPENED);
};


/** EXIT FULLSCREEN METHOD
 ********************************************************************************************/
BLT.Video.exitFullScreen = function() {
    // cross browser exit fullscreen helper
    if (document.exitFullscreen)                document.exitFullscreen();
    else if (document.mozCancelFullScreen)      document.mozCancelFullScreen();
    else if (document.webkitCancelFullScreen)   document.webkitCancelFullScreen();
    else if (document.msExitFullscreen)         document.msExitFullscreen();
};


/** EXIT FULLSCREEN CALLBACK
 ********************************************************************************************/
BLT.Video.onExitFSHandler = function(e)
{
    // run when fullscreen is exited
    if (document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement === false)
    {
        dispatchEvent (BLT.Events.VIDEO_FULLSCREEN_CLOSED);
    }
};


/** ERROR CHECKING
 ********************************************************************************************/
BLT.Video.checkInit = function () {
    if ($vidPlayer === undefined) {
        throw "Video Element not defined. Please use BLT.Video.init () to pass the video element prior to using the video player."
    }
};
var BLT = BLT || {};

BLT.initFramework = function () {
    console.info ('BLT AD FRAMEWORK : version 1.4');
};

// startup
window.onload = BLT.initFramework();


/** FRAMEWORK DEPENDENCIES
 **********************************************************/

/** BLT EVENTS
 **********************************************************/

// polyfill fix for IE (adds custom events to IE)
(function () {
    function CustomEvent ( event, params ) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent ( 'CustomEvent' );
        evt.initCustomEvent ( event, params.bubbles, params.cancelable, params.detail );
        return evt;
    }

    CustomEvent.prototype = window.Event.prototype;
    window.CustomEvent = CustomEvent;
})();


BLT.Events = {

    /** AD EVENTS
     *************************************************************/
    AD_READY:                   new CustomEvent ('adReady'),

    CLOSE_AD:                   new CustomEvent ('closeAd'),

    EXPAND_AD:                  new CustomEvent ('expandAd'),
    EXPAND_READY:               new CustomEvent ('expandReady'),
    EXPAND_AD_DONE:             new CustomEvent ('expandAdDone'), //// FJA
    EXPAND_FINISHED:            new CustomEvent ('expandFinished'), //// FJA

    COLLAPSE_AD:                new CustomEvent ('collapseAd'),
    COLLAPSE_READY:             new CustomEvent ('collapseReady'),
    COLLAPSE_AD_DONE:           new CustomEvent ('collapseAdDone'),  //// FJA
    COLLAPSE_FINISHED:          new CustomEvent ('collapseFinished'),  //// FJA

    REPLAY_AD:                  new CustomEvent ('replayAd'),
    PARSE_DATES:                new CustomEvent ('parseDates'),

    AD_EXIT:                       new CustomEvent ('exitTriggered'), // FJA


    /** VIDEO EVENTS
     *************************************************************/
    // status events
    VIDEO_LOADED:               new CustomEvent ('videoLoaded'),
    VIDEO_LOAD_PROGRESS:        new CustomEvent ('videoLoadProgress'),
    VIDEO_READY:                new CustomEvent ('videoReady'),
    VIDEO_COMPLETE:             new CustomEvent ('videoComplete'),
    VIDEO_STARTED:              new CustomEvent ('videoStarted'),
    VIDEO_PLAYING:              new CustomEvent ('videoPlaying'),
    VIDEO_PAUSED:               new CustomEvent ('videoPaused'),
    VIDEO_RESUMED:              new CustomEvent ('videoResumed'),
    VIDEO_REPLAYING:            new CustomEvent ('videoReplaying'),
    VIDEO_MUTED:                new CustomEvent ('videoMuted'),
    VIDEO_UNMUTED:              new CustomEvent ('videoUnmuted'),
    VIDEO_ERROR:                new CustomEvent ('videoError'),
    VIDEO_ON_CUEPOINT:          new CustomEvent ('videoCuepoint'),

    // buffer events
    VIDEO_BUFFER_EMPTY:         new CustomEvent ('videoBufferEmpty'),
    VIDEO_BUFFER_FULL:          new CustomEvent ('videoBufferFull'),
    VIDEO_SHOW_BUFFER:          new CustomEvent ('videoShowBuffer'),
    VIDEO_HIDE_BUFFER:          new CustomEvent ('videoHideBuffer'),

    // progress events
    VIDEO_PROGRESS:             new CustomEvent ('videoProgress'),
    VIDEO_0_PERCENT:            new CustomEvent ('video 0% complete'),
    VIDEO_25_PERCENT:           new CustomEvent ('video 25% complete'),
    VIDEO_50_PERCENT:           new CustomEvent ('video 50% complete'),
    VIDEO_75_PERCENT:           new CustomEvent ('video 75% complete'),
    VIDEO_100_PERCENT:          new CustomEvent ('video 100% complete'),

    // controls
    MUTE_VIDEO:                 new CustomEvent ('muteVideo'),
    UNMUTE_VIDEO:               new CustomEvent ('unmuteVideo'),
    PLAY_VIDEO:                 new CustomEvent ('playVideo'),
    PAUSE_VIDEO:                new CustomEvent ('pauseVideo'),
    REPLAY_VIDEO:               new CustomEvent ('replayVideo'),
    SEEK_VIDEO:                 new CustomEvent ('seekVideo'),
    KILL_VIDEO:                 new CustomEvent ('killVideo'),
    HIDE_CONTROLS:              new CustomEvent ('hideControls'),
    SHOW_CONTROLS:              new CustomEvent ('showControls'),

    // fullscreen events
    VIDEO_FULLSCREEN_OPENED:    new CustomEvent ('fullScreenOpened'),
    VIDEO_FULLSCREEN_CLOSED:    new CustomEvent ('fullScreenClosed'),
    SHOW_FULLSCREEN:            new CustomEvent ('showFullscreen'),
    EXIT_FULLSCREEN:            new CustomEvent ('exitFullscreen')
};


/** BLT TUNEIN CLASS
 **********************************************************/

BLT.Tunein = BLT.Tunein || {};

BLT.Tunein.dates = [];
BLT.Tunein.today = new Date();
BLT.Tunein.currentTunein = new Date();
BLT.Tunein.currentID = undefined;
BLT.Tunein.isProxy = false;


BLT.Tunein.addDate = function (year, month, day, id ) {
    if (!BLT.Tunein.dates) BLT.Tunein.dates = [];
    var date = new Date (year, month -1, day);
    date.id = id;
    BLT.Tunein.dates.push (date);
};


BLT.Tunein.parseDates = function (year, month, day ) {
    if (BLT.Tunein.errorCheck()) return;

    BLT.Tunein.isProxy = false;

    // if date value for comparison if passed (for testing)
    if (year && month && day) {
        // will use proxy date for testing
        BLT.Tunein.today = new Date (year, month -1, day);
        BLT.Tunein.isProxy = true;
    }

    BLT.Tunein.sortDec (BLT.Tunein.dates);
    BLT.Tunein.currentTunein = BLT.Tunein.today;
    BLT.Tunein.currentID = 'default';

    // determine correct Tunein
    for (var i in BLT.Tunein.dates) {
        if (BLT.Tunein.today >= BLT.Tunein.dates[i]) {
            BLT.Tunein.currentID = BLT.Tunein.dates[i].id;
            BLT.Tunein.currentTunein = BLT.Tunein.dates[i];
            break;
        }
    }

    dispatchEvent (BLT.Events.PARSE_DATES);

    // display the results
    BLT.Tunein.displayCurrentDate();
};


// sort date array ascending
BLT.Tunein.sortAsc = function (dateArray) {
    dateArray.sort (function (a, b) {
        a = new Date ( a.getTime() );
        b = new Date ( b.getTime() );
        return a < b ? -1 : a > b ? 1 : 0;
    });
};


// sort date array descending
BLT.Tunein.sortDec = function (dateArray) {
    dateArray.sort (function (a, b) {
        a = new Date ( a.getTime() );
        b = new Date ( b.getTime() );
        return a > b ? -1 : a < b ? 1 : 0;
    });
};


/** CONSOLE LOG FOR TESTING **/
// displays all dates in the console window (for testing)
BLT.Tunein.displayDates = function () {
    if (BLT.Tunein.errorCheck()) return;

    var revDates = BLT.Tunein.dates.slice(0); // clone
    BLT.Tunein.sortAsc (revDates);

    for (var x in revDates) {
        console.info ( revDates[x].id, '--> ', revDates[x].toLocaleDateString() );
    }

    // display the results
    BLT.Tunein.displayCurrentDate();
};


// displays current dates in console window (for testing)
BLT.Tunein.displayCurrentDate = function () {
    var outputString;
    BLT.Tunein.isProxy ? outputString = 'CURRENT TUNEIN (USING PROXY):' : outputString = 'CURRENT TUNEIN:';

    console.info (outputString, BLT.Tunein.currentID, '-->', BLT.Tunein.currentTunein.toLocaleDateString() );
};


// ERROR CHECKING
BLT.Tunein.errorCheck = function () {
    if (BLT.Tunein.dates.length === 0) {
        console.info ('<<< Tunein cannot be parsed. Use BLT.Tunein.addDate to add date values');
        return 1;
    }
    else return 0; // no error
};



/** BLT HELPER METHODS
 **********************************************************/

/** LOAD EXTERNAL JAVASCRIPT **/
var loadScript = function (scriptURL, callback)  {
    var script = document.createElement("script");
    script.type = "text/javascript";

    if (script.readyState){  // IE, incl. IE9
        script.onreadystatechange = function(){
            if (script.readyState === "loaded" || script.readyState === "complete"){
                script.onreadystatechange = null;
                callback();
            }
        };
    } else {  // others
        script.onload = callback;
    }

    script.src = scriptURL;
    document.body.appendChild (script);
};


/** ADD CLASS **/
var addClass = function ($el, className) {
    var attr = $el.getAttribute ('class') || '';  // default to empty string
    var classList = attr.split (' ');

    for (var i = 0; i < classList.length; i++) {
        if (classList[i] === className) return;
    }

    classList.push (className);
    $el.setAttribute ('class', classList.join(' '));
};

/** REMOVE CLASS **/
var removeClass = function (element, className) {
    var Element = (typeof element === 'string') ? _getElement(element) : element;
    var classNames = Element.className;

    // Clean up Class Names
    classNames = classNames.replace(className, '');
    classNames = classNames.replace(/\s{2,}/g, ' ').replace(/^ +/gm, '').replace(/\s+$/, '');

    // Update Class Names
    Element.className = classNames;
};

/** GET ELEMENT **/
var getEl = function ($id) {
    return document.getElementById ($id);
};

// Get Element by class
var getElClass = function ($id) {
    return document.getElementsByClassName($id);
};

/** SHOW ELEMENT **/
var show = function ($element) {
    $element.style.display = 'block';
};

/** HIDE ELEMENT **/
var hide = function ($element) {
    $element.style.display = 'none';
};

/** DEVICE DETECTION **/
var getDevice = (function () {
    var ua     = navigator.userAgent.toLowerCase();
    var detect = (function (s) {
        if (typeof (s) === 'undefined') {
            s = ua;
        } else {
            ua = s.toLowerCase();
        }
        if (/(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(ua)) {
            return 'tablet';
        } else if (/(mobi|ipod|phone|blackberry|opera mini|fennec|minimo|symbian|psp|nintendo ds|archos|skyfire|puffin|blazer|bolt|gobrowser|iris|maemo|semc|teashark|uzard)/.test(ua)) {
            return 'phone';
        } else {
            return 'desktop';
        }
    });
    var device = detect();
    return {
        detect     : detect,
        device     : device,
        isMobile   : (device !== 'desktop'),
        isTablet   : (device === 'tablet'),
        isDestktop : (device === 'desktop'),
        userAgent  : ua
    };
}());


/** BLT VIDEO CONTROLS CLASS
 **********************************************************/

var BLT = BLT || {};
BLT.VideoControls = {};

var videoPlayer,
    videoControls,
    playButton,
    pauseButton,
    soundOffButton,
    soundOnButton,
    videoScrubber,
    scrubHandle,
    videoTrack,
    videoProgress,
    trackRect,
    trackLeft,
    trackRight,
    trackWidth,
    trackOffsetLeft,
    scrubberLeft,
    videoDuration,
    inProgress = false;


BLT.VideoControls.initControls = function (player) {
    videoPlayer = player;
    BLT.VideoControls.initVars();
    BLT.VideoControls.addListeners();
};


BLT.VideoControls.initVars = function () {
    // elements
    videoControls = document.getElementById     ('vidControls');
    playButton = document.getElementById        ('playButton');
    pauseButton = document.getElementById       ('pauseButton');
    soundOffButton = document.getElementById    ('soundOffButton');
    soundOnButton = document.getElementById     ('soundOnButton');
    videoScrubber = document.getElementById     ('videoScrubber');
    scrubHandle = document.getElementById       ('scrubHandle');
    videoTrack = document.getElementById        ('scrubTrack');
    videoProgress = document.getElementById     ('scrubProgress');
};


BLT.VideoControls.addListeners = function () {
    playButton.addEventListener ('click', BLT.VideoControls.handleControls);
    pauseButton.addEventListener ('click', BLT.VideoControls.handleControls);
    soundOffButton.addEventListener ('click', BLT.VideoControls.handleControls);
    soundOnButton.addEventListener ('click', BLT.VideoControls.handleControls);

    addEventListener ('hideControls', BLT.VideoControls.handleVideoEvents);
    addEventListener ('showControls', BLT.VideoControls.handleVideoEvents);
    addEventListener ('videoPlaying', BLT.VideoControls.handleVideoEvents);
    addEventListener ('videoPaused', BLT.VideoControls.handleVideoEvents);
    addEventListener ('videoMuted', BLT.VideoControls.handleVideoEvents);
    addEventListener ('videoUnmuted', BLT.VideoControls.handleVideoEvents);
    addEventListener ('killVideo', BLT.VideoControls.killControls);

    addEventListener ('videoComplete', BLT.VideoControls.handleVideoComplete);
    videoPlayer.addEventListener ('canplay', BLT.VideoControls.videoReady);

    if (videoScrubber != null) {
        videoTrack.addEventListener ('click', BLT.VideoControls.handleControls);
        videoPlayer.addEventListener ('timeupdate', BLT.VideoControls.handleProgressEvent);

        // scrubber
        scrubHandle.onmousedown = function(e) {
            videoDuration = videoPlayer.duration;
            videoPlayer.removeEventListener ('timeupdate', BLT.VideoControls.handleProgressEvent);

            document.onmousemove = function(e) {
                if (e.clientX >= (trackLeft + scrubHandle.offsetWidth /2) && e.clientX <= trackRight) {
                    BLT.VideoControls.setScrubberPosition (e);
                }
            };

            document.onmouseup = function() {
                document.onmousemove = document.onmouseup = null;
                videoPlayer.addEventListener ('timeupdate', BLT.VideoControls.handleProgressEvent);
            };
        }
    }
};

BLT.VideoControls.removeListeners = function () {
    console.log ('REMOVE CONTROL LISTENERS');

    playButton.removeEventListener ('click', BLT.VideoControls.handleControls);
    pauseButton.removeEventListener ('click', BLT.VideoControls.handleControls);
    soundOffButton.removeEventListener ('click', BLT.VideoControls.handleControls);
    soundOnButton.removeEventListener ('click', BLT.VideoControls.handleControls);

    removeEventListener ('hideControls', BLT.VideoControls.handleVideoEvents);
    removeEventListener ('showControls', BLT.VideoControls.handleVideoEvents);
    removeEventListener ('videoPlaying', BLT.VideoControls.handleVideoEvents);
    removeEventListener ('videoPaused', BLT.VideoControls.handleVideoEvents);
    removeEventListener ('videoMuted', BLT.VideoControls.handleVideoEvents);
    removeEventListener ('videoUnmuted', BLT.VideoControls.handleVideoEvents);
    removeEventListener ('killVideo', BLT.VideoControls.killControls);

    removeEventListener ('videoComplete', BLT.VideoControls.handleVideoComplete);

    videoTrack.removeEventListener ('click', BLT.VideoControls.handleControls);
    videoPlayer.removeEventListener ('timeupdate', BLT.VideoControls.handleProgressEvent);
    videoPlayer.removeEventListener ('canplay', BLT.VideoControls.videoReady);
};


BLT.VideoControls.videoReady = function (event) {
    // display controls
    show (videoControls);

    videoPlayer.removeEventListener ('canplay', BLT.VideoControls.videoReady);

    // store video's duration
    videoDuration = videoPlayer.duration;

    // if scrubber exists, set properties
    if (videoScrubber != null) {
        trackRect = videoTrack.getBoundingClientRect();
        trackWidth = trackRect.width;
        trackLeft = trackRect.left;
        trackRight = trackRect.right;
        trackOffsetLeft = videoTrack.offsetLeft;

        if (typeof scrubberLeft === 'undefined') scrubberLeft = scrubHandle.offsetLeft;
    }
};

BLT.VideoControls.handleControls = function (event) {
    var obj = event.currentTarget.id;

    switch (obj) {
        case 'playButton':
            dispatchEvent (BLT.Events.PLAY_VIDEO);
            if (videoScrubber != null && videoPlayer.currentTime == 0) videoProgress.style.width = 0;
            BLT.VideoControls.togglePlayButton (false);
            break;

        case 'pauseButton':
            dispatchEvent (BLT.Events.PAUSE_VIDEO);
            BLT.VideoControls.togglePlayButton (true);
            break;

        case 'soundOffButton':
            dispatchEvent (BLT.Events.UNMUTE_VIDEO);
            BLT.VideoControls.toggleMuteButton (false);
            break;

        case 'soundOnButton':
            dispatchEvent (BLT.Events.MUTE_VIDEO);
            BLT.VideoControls.toggleMuteButton (true);
            break;

        case 'scrubTrack':
            BLT.VideoControls.setScrubberPosition (event);
            break;
    }
};

BLT.VideoControls.handleVideoEvents = function (event) {
    switch (event.type) {
        case 'videoPlaying':
            // console.info("video playing -- controls");
            BLT.VideoControls.showHideControls ('visible');
            BLT.VideoControls.togglePlayButton (false);
            break;

        case 'videoPaused':
            BLT.VideoControls.togglePlayButton (true);
            break;

        case 'hideControls':
            // console.info("hideControls - EVENT");
            BLT.VideoControls.showHideControls ('hidden');
            break;

        case 'showControls':
            BLT.VideoControls.showHideControls ('visible');
            break;

        case 'videoMuted':
            BLT.VideoControls.toggleMuteButton (true);
            break;

        case 'videoUnmuted':
            BLT.VideoControls.toggleMuteButton (false);
            break;
    }
};

BLT.VideoControls.showHideControls = function (state) {
    console.info(" HIDE VIDEO CONTROLS NOW !!!!!!");
    videoControls.style.visibility = state;
};


BLT.VideoControls.setScrubberPosition = function (event) {
    if (!videoDuration) videoDuration = videoPlayer.duration;

    var currPos = event.clientX;
    var newPos = currPos - trackLeft;
    var posRatio = newPos / trackWidth;
    var newTime = videoDuration * posRatio;

    videoPlayer.currentTime = newTime;
    scrubHandle.style.left = (newPos - (scrubHandle.offsetWidth /2)) + "px";
    videoProgress.style.width = (currPos - trackLeft) + "px";
};


BLT.VideoControls.handleProgressEvent = function () {
    if (!videoDuration) videoDuration = videoPlayer.duration;

    inProgress = true;

    // BLT.VideoControls.togglePlayButton (false); // Band-aid

    // moves scrubber in relation to currentTime
    var currTime = videoPlayer.currentTime;
    var posRatio = currTime/videoDuration;
    var posOffset = trackWidth * posRatio;
    var scrubberPos = scrubberLeft + posOffset;

    var newPos = scrubberPos - (scrubHandle.offsetWidth /2);
    if (newPos < 0) newPos = scrubberPos;

    scrubHandle.style.left = newPos + "px";
    videoProgress.style.width = (scrubberPos - trackOffsetLeft) + "px";
};


BLT.VideoControls.togglePlayButton = function (playState) {
    // console.info(" Play pause toggle ---- playState = "+playState);
;    if (playState === true) {
        show (playButton);
        hide (pauseButton);
    }
    else {
        hide (playButton);
        show (pauseButton);
    }
};


BLT.VideoControls.toggleMuteButton = function (muteState) {
    if (muteState === true) {
        show (soundOffButton);
        hide (soundOnButton);
    }
    else {
        hide (soundOffButton);
        show (soundOnButton);
    }
};


BLT.VideoControls.handleVideoComplete = function (event) {
    // console.info("video complete -- controls");
   if(!inProgress){
       BLT.VideoControls.togglePlayButton (true);
   } else {
       inProgress = false;
   }
};


BLT.VideoControls.killControls = function () {
    BLT.VideoControls.removeListeners();
    hide (videoControls);
};

var AD = AD || {};

var $ad, $bgExits, $videoContainer, $mainVideo, $videoExit, $cfs, $vidControls, $closeVideo,
    $expBackground, $lockup, $tuneIn, $watchTrailer, $film1, $film2, $film3, $film4,
    $head1, $head2, $filmStrip, $filmStripLong, $fsPink1, $fsPink2, $fsPink3;

var $isVideoComplete = false,
    $initialPlay = false;

// var videoPercent = .92;
// var videoPercent_icon = .84;
// var debug = false;

/** INITIALIZE AD
 *******************************************************************/
AD.initAd = function () {
    AD.setVars();
    AD.checkDate();
    AD.addListeners();
    AD.addVideos();
    AD.setupAnimation();

    addClass(adContainer, "hidden");
    addClass($videoContainer, "hidden");
    addClass($cfs, 'hidden');

    addClass($film2, "hidden");
    addClass($film3, "hidden");
    addClass($film4, "hidden");

    TweenLite.set($fsPink1,{autoAlpha:0});
    TweenLite.set($fsPink2,{autoAlpha:0});
    TweenLite.set($fsPink3,{autoAlpha:0});

    addClass($closeVideo, "hidden");
    addClass($watchTrailer, "hidden");

    // INITIALIZE THE AD VENDOR API
    initVendor();
};

/** AD READY -- CALLED ONCE VENDOR API IS READY (EVENT DISPATCHED)
 *******************************************************************/
AD.adReady = function() {
    console.info ('AD READY');
    addClass($ad,'ready');
    removeClass(adContainer, "hidden");
    $initialPlay = false;
    tlHeader.play();
    tlFilmStrip.play();

    filmGrainTimer = setInterval(AD.startFilmGrain, 100);
};

// Set DOM element variables ----------------------------
AD.setVars = function () {
    $ad                 = getEl ('adContainer');
    $bgExits            = getElClass('bg-exit');
    $videoContainer     = getEl ('videoContainer');
    $mainVideo          = getEl ('videoPlayer');
    $videoScrubber      = getEl ('videoScrubber');
    $vidControls        = getEl ('vidControls');
    $videoExit          = getEl ('videoClick');
    $cfs                = getEl ('snd-icon');
    $expanded           = getEl ('expand');
    $expBackground      = getEl ('expBackground');
    $lockup             = getEl ('lockup');
    $tuneIn             = getEl ('tuneIn');
    $film1              = getEl ('film1');
    $film2              = getEl ('film2');
    $film3              = getEl ('film3');
    $film4              = getEl ('film4');
    $head1              = getEl ('head1');
    $head2              = getEl ('head2');
    $filmStrip          = getEl ('filmStrip');
    $filmStripLong      = getEl ('filmStripLong');
    $fsPink1            = getEl ('fsPink1');
    $fsPink2            = getEl ('fsPink2');
    $fsPink3            = getEl ('fsPink3');
    $watchTrailer       = getEl ('replayBtn');
    $closeVideo         = getEl ('closeVideo');
};

/** SETUP LISTENERS
 *******************************************************************/
AD.addListeners = function () {
    // ad events
    addEventListener ('adReady', AD.adReady);
    addEventListener ('exitTriggered', AD.exitTriggered);
    $tuneIn.addEventListener('click', AD.exitHandler);

    // video events
    // $mainVideo.addEventListener ('timeupdate', AD.checkPercent);
    addEventListener ('videoComplete', AD.videoComplete);
    $videoContainer.addEventListener('mouseover', AD.handleControls);
    $videoContainer.addEventListener('mouseout', AD.handleControls);
    $videoExit.addEventListener('click', AD.exitHandler);
    $watchTrailer.addEventListener('click', AD.replayVideo);
    $closeVideo.addEventListener('click', AD.closeVideo);

    // $cta.addEventListener('mouseover', AD.ctaHandler);
    // $cta.addEventListener('mouseout', AD.ctaHandler);

    // Exit Events
    for (var bgExitIndex = 0; bgExitIndex < $bgExits.length; bgExitIndex++) {
        $bgExits[bgExitIndex].addEventListener('click', AD.exitHandler);
    }
};

// Exit handler for DC exit
AD.exitTriggered = function(event){
    // console.info ('DC exitTriggered');
    AD.killVideo();
};

// Exit handler for all click-outs
AD.exitHandler = function(event){
    var target = (event.currentTarget) ? event.currentTarget : event.srcElement;
    // console.info ('AD.exitHandler | target : '+target);
    switch(target){
        case $videoExit:
            if($initialPlay){ AD.clickForSound(); } else{ Enabler.exit("GENERAL"); }
            break;
        case $tuneIn:
        default:
            Enabler.exit("GENERAL");
            break;
    }
};

////////////////////////////////////////////////////////////////////////////
// *** Video *** ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

var pathAka = "video/"; //"http://downloads.paramount.com/mp/advertising/fences/BLT/970x250/";

// Add videos to play --------------
AD.addVideos = function() {
    //  ADD VIDEOS -- (videoPath, videoID, trackingString)
    BLT.Video.init ($mainVideo); // video container element

    // default
    BLT.Video.addVideo (pathAka+'theDeuce_s2_300x250_user_SUNDAY', 'default', '30sec');

    // Tomorrow
    BLT.Video.addVideo (pathAka+'theDeuce_s2_300x250_user_SUNDAY', 'tomorrow', '30sec');

    // Tonight
    BLT.Video.addVideo (pathAka+'theDeuce_s2_300x250_user_TONIGHT', 'tonight', '30sec');

    // Post
    BLT.Video.addVideo (pathAka+'theDeuce_s2_300x250_user_SUNDAYS', 'post', '30sec');
};

// shows/hides video controls -------------------//
AD.handleControls = function(event){
    var eventType = event.type;
    //console.log("eventType = ",eventType);

    dispatchEvent (BLT.Events.SHOW_CONTROLS);
    switch (eventType)
    {
        case "mouseover":
            TweenLite.to($vidControls,.3, {opacity:1, ease: Expo.easeOut});
            break;
        case "mouseout":
            TweenLite.to($vidControls,.3, {opacity:0, ease: Expo.easeInOut});
            break;
    }
};

// plays user initiated video -----------------//
AD.clickForSound = function(){
    $initialPlay = false;
    $isVideoComplete = false;
    addClass($cfs, 'hidden');
    removeClass($closeVideo, "hidden");
    BLT.Video.loadPlayVideo (1, "custom", false);
};

AD.videoComplete = function(){
    console.log("video Complete");

    // if($initialPlay){
    //     $initialPlay = false;
    //     addClass($videoContainer,'user-video');
    //     $mainVideo.removeEventListener ('timeupdate', AD.checkPercent);
    // }

    addClass($videoContainer, "hidden");
    addClass($closeVideo, "hidden");
    removeClass($watchTrailer, "hidden");
};

AD.replayVideo = function(){
    addClass($watchTrailer, "hidden");
    removeClass($closeVideo, "hidden");
    removeClass($videoContainer, "hidden");
    TweenLite.set($videoContainer, {opacity:1});
    BLT.Video.loadPlayVideo (0, "custom", false);
};

// AD.ctaHandler = function (event){
//     var eventType = event.type;
//     //console.log("eventType = ",eventType);
//     switch (eventType)
//     {
//         case "mouseover":
//             TweenLite.to($ctaHover,.3, {width:96, ease: Expo.easeOut});
//             console.log("CTA - MouseOver");
//             break;
//         case "mouseout":
//             TweenLite.to($ctaHover,.3, {width:0, ease: Expo.easeOut});
//             console.log("CTA - MouseOut");
//             break;
//     }
//
// };

AD.closeVideo = function(){
    removeClass($watchTrailer, "hidden");
    addClass($closeVideo, "hidden");
    addClass($videoContainer, "hidden");
    BLT.Video.killVideo();
};

AD.killVideo = function(){
    // console.info("video Kill");
    removeClass($watchTrailer, "hidden");
    addClass($closeVideo, "hidden");
    addClass($videoContainer, "hidden");
    BLT.Video.killVideo();
};

// AD.checkPercent = function () {
//     if (!$initialPlay) return;
//     var vPercent = $mainVideo.currentTime / $mainVideo.duration || 0;
//     if (vPercent > videoPercent_icon) {
//         addClass($cfs,'hidden');
//     }
//     if (vPercent > videoPercent) {
//         TweenLite.to ($videoContainer, .5, {opacity:0});
//         removeClass($watchTrailer, "hidden");
//     }
// };

/** ANIMATION SETUP
 *******************************************************************/
var filmGrainTimer;
var filmFrameNumber = 1;
var tlFilmStrip = new TimelineLite({paused:true});
var tlHeader = new TimelineLite({paused:true});

AD.setupAnimation = function() {
    // setup animations here; i.e. Greensock
    AD.headerAnim();
    AD.filmStripAnim();
};

// Header animation
AD.headerAnim = function() {
    tlHeader.addLabel("start", 0);
    tlHeader.addLabel("end", 2);

    tlHeader.from($head1,.8,{width:0, ease: SteppedEase.config(7)}, "start");
    tlHeader.from($head2,.8,{width:0, ease: SteppedEase.config(7)}, "start+=.5");

};


// Film Strip animation
AD.filmStripAnim = function(){
    tlFilmStrip.addLabel("start", 0);
    tlFilmStrip.addLabel("hop1", .9);
    tlFilmStrip.addLabel("pink", 1.7);
    tlFilmStrip.addLabel("hop2", 2.2);
    tlFilmStrip.addLabel("hop3", 7);
    tlFilmStrip.addLabel("hop4", 10);
    tlFilmStrip.addLabel("end", 15);

    tlFilmStrip.from($filmStripLong,1,{x:600, ease: Linear.ease}, "start");
    tlFilmStrip.to('#fs2',.1,{autoAlpha:0}, "hop1");
    tlFilmStrip.to($filmStrip,.1,{y:-1}, "hop1");
    tlFilmStrip.to($filmStrip,.2,{y:2}, "hop1+=.1");
    tlFilmStrip.to($filmStrip,.1,{y:-1}, "hop1+=.3");

    tlFilmStrip.set($fsPink1,{autoAlpha:1}, "pink");
    tlFilmStrip.set($fsPink2,{autoAlpha:1}, "pink+=.2");
    tlFilmStrip.set($fsPink3,{autoAlpha:1}, "pink+=.4");

    tlFilmStrip.call(AD.stopFilmGrain, [],this,"pink+=.8");

    tlFilmStrip.to($filmStrip,.1,{y:-1}, "hop2");
    tlFilmStrip.to($filmStrip,.2,{y:2}, "hop2+=.1");
    tlFilmStrip.to($filmStrip,.1,{y:-1}, "hop2+=.3");

    tlFilmStrip.call(function(){removeClass($watchTrailer, "hidden");}, [],this,"hop2+=.3");

    // tlFilmStrip.to($filmStrip,.1,{y:-1}, "hop3");
    // tlFilmStrip.to($filmStrip,.2,{y:2}, "hop3+=.1");
    // tlFilmStrip.to($filmStrip,.1,{y:-1}, "hop3+=.3");


    // tlFilmStrip.to($filmStrip,.1,{y:-1}, "hop4");
    // tlFilmStrip.to($filmStrip,.2,{y:2}, "hop4+=.1");
    // tlFilmStrip.to($filmStrip,.1,{y:-1}, "hop4+=.3");

};

// Film Grain Start animation
AD.startFilmGrain = function(){
    console.info ('switchFrame ----  filmFrameNumber = '+filmFrameNumber);

    if(filmFrameNumber < 4){
        filmFrameNumber++;
        console.info ('filmFrameNumber = '+filmFrameNumber);

        switch (filmFrameNumber){
            case 2:
                addClass($film1, "hidden");
                removeClass($film2, "hidden");
                break;

            case 3:
                addClass($film2, "hidden");
                removeClass($film3, "hidden");
                break;

            case 4:
                addClass($film3, "hidden");
                removeClass($film4, "hidden");
                break;
        }


    } else{
        filmFrameNumber = 1;
        addClass($film4, "hidden");
        removeClass($film1, "hidden");
    }
};

// Film Grain Stop animation
AD.stopFilmGrain = function(){
    clearInterval(filmGrainTimer);
    switch (filmFrameNumber){
        case 1:
            addClass($film1, "hidden");
            break;
        case 2:
            addClass($film2, "hidden");
            break;

        case 3:
            addClass($film3, "hidden");
            break;

        case 4:
            addClass($film4, "hidden");
            break;
    }
};

//////////////////////////////////////////////////////////////////////////////
///// Date Code ---------------

AD.checkDate = function () {
    console.log('date check');



    BLT.Tunein.addDate (2018, 9, 9, 'tonight');
    BLT.Tunein.addDate (2018, 9, 10, 'post');
    BLT.Tunein.parseDates ();
    // BLT.Tunein.parseDates (2018, 9, 15); // USE TO TEST DATES

    switch (BLT.Tunein.currentID) {

        case 'post':
            console.info('DATE - Post');
            addClass($tuneIn, 'Date_post');
            break;

        case 'tonight':
            console.info('DATE - tonight');
            addClass($tuneIn, 'Date_tonight');
            break;

        default:
            console.info('DATE - Default');
            break;
    }
};


/** STARTUP
 *******************************************************************/
window.load = AD.initAd();
//# sourceMappingURL=../main.min.js.map
