/** SITE-SERVED CORE FUNCTIONS
 ********************************************************************************************/

var isExpanded = false;

/** PRE INIT **********************************************/
function initVendor () {
    vendorReady();
}

/** INIT *************************************************/
function vendorReady () {
    console.info ('SITE-SERVED API INITIALIZING');

    addListeners ();
    adVisible ();
}

/** AD VISIBLE *****************************************/
function adVisible () {
    // Ad visible ... dispatch event to app
    dispatchEvent (BLT.Events.AD_READY);
}

/** LISTENERS *****************************************/
function addListeners () {
    // AD events
    addEventListener ('collapseStart', onCollapseStart);
    addEventListener ('collapseFinish', onCollapseFinish);
    addEventListener ('expandStart', onExpandStart);
    addEventListener ('expandFinish', onExpandFinish);
    addEventListener ('closeAd', onCloseAd);
}


/***********************************************************************************************
 * COLLAPSE METHODS
 **********************************************************************************************/
function onCollapseStart (event) {
    // console.info ('SS_CORE: onCollapseStart');
    dispatchEvent (BLT.Events.COLLAPSE_START);
}

function onCollapseFinish (event) {
    isExpanded = false;
}


/***********************************************************************************************
 * EXPAND METHODS
 **********************************************************************************************/
function onExpandStart (event) {
    // console.info ('SS_CORE: onExpandStart');
    dispatchEvent (BLT.Events.EXPAND_START);
}

function onExpandFinish (event) {
    isExpanded = true;
}


/***********************************************************************************************
 * CLOSE METHOD
 **********************************************************************************************/
function onCloseAd (event) {
    // console.info ('SS_CORE: onCloseAd');
    isExpanded = false;
    onCollapseStart (null);
}


var BLT = BLT || {};

BLT.initFramework = function () {
    console.info ('BLT AD FRAMEWORK : version 1.4');
};

// startup
window.onload = BLT.initFramework();


/** FRAMEWORK DEPENDENCIES
 **********************************************************/

/** BLT EVENTS
 **********************************************************/

// polyfill fix for IE (adds custom events to IE)
(function () {
    function CustomEvent ( event, params ) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent ( 'CustomEvent' );
        evt.initCustomEvent ( event, params.bubbles, params.cancelable, params.detail );
        return evt;
    }

    CustomEvent.prototype = window.Event.prototype;
    window.CustomEvent = CustomEvent;
})();


BLT.Events = {

    /** AD EVENTS
     *************************************************************/
    AD_READY:                   new CustomEvent ('adReady'),

    CLOSE_AD:                   new CustomEvent ('closeAd'),
    COLLAPSE_AD:                new CustomEvent ('collapseAd'),
    COLLAPSE_START:             new CustomEvent ('collapseStart'),
    COLLAPSE_FINISH:            new CustomEvent ('collapseFinish'),

    EXPAND_AD:                  new CustomEvent ('expandAd'),
    EXPAND_START:               new CustomEvent ('expandStart'),
    EXPAND_FINISH:              new CustomEvent ('expandFinish'),

    REPLAY_AD:                  new CustomEvent ('replayAd'),
    PARSE_DATES:                new CustomEvent ('parseDates'),


    /** VIDEO EVENTS
     *************************************************************/
    // status events
    VIDEO_LOADED:               new CustomEvent ('videoLoaded'),
    VIDEO_LOAD_PROGRESS:        new CustomEvent ('videoLoadProgress'),
    VIDEO_READY:                new CustomEvent ('videoReady'),
    VIDEO_COMPLETE:             new CustomEvent ('videoComplete'),
    VIDEO_STARTED:              new CustomEvent ('videoStarted'),
    VIDEO_PLAYING:              new CustomEvent ('videoPlaying'),
    VIDEO_PAUSED:               new CustomEvent ('videoPaused'),
    VIDEO_RESUMED:              new CustomEvent ('videoResumed'),
    VIDEO_REPLAYING:            new CustomEvent ('videoReplaying'),
    VIDEO_MUTED:                new CustomEvent ('videoMuted'),
    VIDEO_UNMUTED:              new CustomEvent ('videoUnmuted'),
    VIDEO_ERROR:                new CustomEvent ('videoError'),
    VIDEO_ON_CUEPOINT:          new CustomEvent ('videoCuepoint'),

    // buffer events
    VIDEO_BUFFER_EMPTY:         new CustomEvent ('videoBufferEmpty'),
    VIDEO_BUFFER_FULL:          new CustomEvent ('videoBufferFull'),
    VIDEO_SHOW_BUFFER:          new CustomEvent ('videoShowBuffer'),
    VIDEO_HIDE_BUFFER:          new CustomEvent ('videoHideBuffer'),

    // progress events
    VIDEO_PROGRESS:             new CustomEvent ('videoProgress'),
    VIDEO_0_PERCENT:            new CustomEvent ('video 0% complete'),
    VIDEO_25_PERCENT:           new CustomEvent ('video 25% complete'),
    VIDEO_50_PERCENT:           new CustomEvent ('video 50% complete'),
    VIDEO_75_PERCENT:           new CustomEvent ('video 75% complete'),
    VIDEO_100_PERCENT:          new CustomEvent ('video 100% complete'),

    // controls
    MUTE_VIDEO:                 new CustomEvent ('muteVideo'),
    UNMUTE_VIDEO:               new CustomEvent ('unmuteVideo'),
    PLAY_VIDEO:                 new CustomEvent ('playVideo'),
    PAUSE_VIDEO:                new CustomEvent ('pauseVideo'),
    REPLAY_VIDEO:               new CustomEvent ('replayVideo'),
    SEEK_VIDEO:                 new CustomEvent ('seekVideo'),
    KILL_VIDEO:                 new CustomEvent ('killVideo'),
    HIDE_CONTROLS:              new CustomEvent ('hideControls'),
    SHOW_CONTROLS:              new CustomEvent ('showControls'),

    // fullscreen events
    VIDEO_FULLSCREEN_OPENED:    new CustomEvent ('fullScreenOpened'),
    VIDEO_FULLSCREEN_CLOSED:    new CustomEvent ('fullScreenClosed'),
    SHOW_FULLSCREEN:            new CustomEvent ('showFullscreen'),
    EXIT_FULLSCREEN:            new CustomEvent ('exitFullscreen')
};


/** BLT TUNEIN CLASS
 **********************************************************/

BLT.Tunein = BLT.Tunein || {};

BLT.Tunein.dates = [];
BLT.Tunein.today = new Date();
BLT.Tunein.currentTunein = new Date();
BLT.Tunein.currentID = undefined;
BLT.Tunein.isProxy = false;


BLT.Tunein.addDate = function (year, month, day, id ) {
    if (!BLT.Tunein.dates) BLT.Tunein.dates = [];
    var date = new Date (year, month -1, day);
    date.id = id;
    BLT.Tunein.dates.push (date);
};


BLT.Tunein.parseDates = function (year, month, day ) {
    if (BLT.Tunein.errorCheck()) return;

    BLT.Tunein.isProxy = false;

    // if date value for comparison if passed (for testing)
    if (year && month && day) {
        // will use proxy date for testing
        BLT.Tunein.today = new Date (year, month -1, day);
        BLT.Tunein.isProxy = true;
    }

    BLT.Tunein.sortDec (BLT.Tunein.dates);
    BLT.Tunein.currentTunein = BLT.Tunein.today;
    BLT.Tunein.currentID = 'default';

    // determine correct Tunein
    for (var i in BLT.Tunein.dates) {
        if (BLT.Tunein.today >= BLT.Tunein.dates[i]) {
            BLT.Tunein.currentID = BLT.Tunein.dates[i].id;
            BLT.Tunein.currentTunein = BLT.Tunein.dates[i];
            break;
        }
    }

    dispatchEvent (BLT.Events.PARSE_DATES);

    // display the results
    BLT.Tunein.displayCurrentDate();
};


// sort date array ascending
BLT.Tunein.sortAsc = function (dateArray) {
    dateArray.sort (function (a, b) {
        a = new Date ( a.getTime() );
        b = new Date ( b.getTime() );
        return a < b ? -1 : a > b ? 1 : 0;
    });
};


// sort date array descending
BLT.Tunein.sortDec = function (dateArray) {
    dateArray.sort (function (a, b) {
        a = new Date ( a.getTime() );
        b = new Date ( b.getTime() );
        return a > b ? -1 : a < b ? 1 : 0;
    });
};


/** CONSOLE LOG FOR TESTING **/
// displays all dates in the console window (for testing)
BLT.Tunein.displayDates = function () {
    if (BLT.Tunein.errorCheck()) return;

    var revDates = BLT.Tunein.dates.slice(0); // clone
    BLT.Tunein.sortAsc (revDates);

    for (var x in revDates) {
        console.info ( revDates[x].id, '--> ', revDates[x].toLocaleDateString() );
    }

    // display the results
    BLT.Tunein.displayCurrentDate();
};


// displays current dates in console window (for testing)
BLT.Tunein.displayCurrentDate = function () {
    var outputString;
    BLT.Tunein.isProxy ? outputString = 'CURRENT TUNEIN (USING PROXY):' : outputString = 'CURRENT TUNEIN:';

    console.info (outputString, BLT.Tunein.currentID, '-->', BLT.Tunein.currentTunein.toLocaleDateString() );
};


// ERROR CHECKING
BLT.Tunein.errorCheck = function () {
    if (BLT.Tunein.dates.length === 0) {
        console.info ('<<< Tunein cannot be parsed. Use BLT.Tunein.addDate to add date values');
        return 1;
    }
    else return 0; // no error
};



/** BLT HELPER METHODS
 **********************************************************/

/** LOAD EXTERNAL JAVASCRIPT **/
var loadScript = function (scriptURL, callback)  {
    var script = document.createElement("script");
    script.type = "text/javascript";

    if (script.readyState){  // IE, incl. IE9
        script.onreadystatechange = function(){
            if (script.readyState === "loaded" || script.readyState === "complete"){
                script.onreadystatechange = null;
                callback();
            }
        };
    } else {  // others
        script.onload = callback;
    }

    script.src = scriptURL;
    document.body.appendChild (script);
};


/** ADD CLASS **/
var addClass = function ($el, className) {
    var attr = $el.getAttribute ('class') || '';  // default to empty string
    var classList = attr.split (' ');

    for (var i = 0; i < classList.length; i++) {
        if (classList[i] === className) return;
    }

    classList.push (className);
    $el.setAttribute ('class', classList.join(' '));
};


/** REMOVE CLASS **/
var removeClass = function (element, className) {
    var Element = (typeof element === 'string') ? _getElement(element) : element;
    var classNames = Element.className;

    // Clean up Class Names
    classNames = classNames.replace(className, '');
    classNames = classNames.replace(/\s{2,}/g, ' ').replace(/^ +/gm, '').replace(/\s+$/, '');

    // Update Class Names
    Element.className = classNames;
};


/** GET ELEMENT **/
var getEl = function ($id) {
    return document.getElementById ($id);
};

// Get Element by class
// var getElClass = function ($id) {
//     return document.getElementsByClassName($id);
// };

/** SHOW ELEMENT **/
var show = function ($element) {
    $element.style.display = 'block';
};


/** HIDE ELEMENT **/
var hide = function ($element) {
    $element.style.display = 'none';
};


/** DEVICE DETECTION **/
var getDevice = (function () {
    var ua     = navigator.userAgent.toLowerCase();
    var detect = (function (s) {
        if (typeof (s) === 'undefined') {
            s = ua;
        } else {
            ua = s.toLowerCase();
        }
        if (/(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(ua)) {
            return 'tablet';
        } else if (/(mobi|ipod|phone|blackberry|opera mini|fennec|minimo|symbian|psp|nintendo ds|archos|skyfire|puffin|blazer|bolt|gobrowser|iris|maemo|semc|teashark|uzard)/.test(ua)) {
            return 'phone';
        } else {
            return 'desktop';
        }
    });
    var device = detect();
    return {
        detect     : detect,
        device     : device,
        isMobile   : (device !== 'desktop'),
        isTablet   : (device === 'tablet'),
        isDestktop : (device === 'desktop'),
        userAgent  : ua
    };
}());


/** BLT VIDEO CONTROLS CLASS
 **********************************************************/

var BLT = BLT || {};
BLT.VideoControls = {};

var videoPlayer,
    videoControls,
    playButton,
    pauseButton,
    soundOffButton,
    soundOnButton,
    videoScrubber,
    scrubHandle,
    videoTrack,
    videoProgress,
    trackRect,
    trackLeft,
    trackRight,
    trackWidth,
    trackOffsetLeft,
    scrubberLeft,
    videoDuration;


BLT.VideoControls.initControls = function (player) {
    videoPlayer = player;
    BLT.VideoControls.initVars();
    BLT.VideoControls.addListeners();
};


BLT.VideoControls.initVars = function () {
    // elements
    videoControls = document.getElementById     ('vidControls');
    playButton = document.getElementById        ('playButton');
    pauseButton = document.getElementById       ('pauseButton');
    soundOffButton = document.getElementById    ('soundOffButton');
    soundOnButton = document.getElementById     ('soundOnButton');
    videoScrubber = document.getElementById     ('videoScrubber');
    scrubHandle = document.getElementById       ('scrubHandle');
    videoTrack = document.getElementById        ('scrubTrack');
    videoProgress = document.getElementById     ('scrubProgress');
};


BLT.VideoControls.addListeners = function () {
    playButton.addEventListener ('click', BLT.VideoControls.handleControls);
    pauseButton.addEventListener ('click', BLT.VideoControls.handleControls);
    soundOffButton.addEventListener ('click', BLT.VideoControls.handleControls);
    soundOnButton.addEventListener ('click', BLT.VideoControls.handleControls);

    addEventListener ('hideControls', BLT.VideoControls.handleVideoEvents);
    addEventListener ('showControls', BLT.VideoControls.handleVideoEvents);
    addEventListener ('videoPlaying', BLT.VideoControls.handleVideoEvents);
    addEventListener ('videoPaused', BLT.VideoControls.handleVideoEvents);
    addEventListener ('videoMuted', BLT.VideoControls.handleVideoEvents);
    addEventListener ('videoUnmuted', BLT.VideoControls.handleVideoEvents);
    addEventListener ('killVideo', BLT.VideoControls.killControls);

    addEventListener ('videoComplete', BLT.VideoControls.handleVideoComplete);
    videoPlayer.addEventListener ('canplay', BLT.VideoControls.videoReady);

    if (videoScrubber != null) {
        videoTrack.addEventListener ('click', BLT.VideoControls.handleControls);
        videoPlayer.addEventListener ('timeupdate', BLT.VideoControls.handleProgressEvent);

        // scrubber
        scrubHandle.onmousedown = function(e) {
            videoDuration = videoPlayer.duration;
            videoPlayer.removeEventListener ('timeupdate', BLT.VideoControls.handleProgressEvent);

            document.onmousemove = function(e) {
                if (e.clientX >= (trackLeft + scrubHandle.offsetWidth /2) && e.clientX <= trackRight) {
                    BLT.VideoControls.setScrubberPosition (e);
                }
            };

            document.onmouseup = function() {
                document.onmousemove = document.onmouseup = null;
                videoPlayer.addEventListener ('timeupdate', BLT.VideoControls.handleProgressEvent);
            };
        }
    }
};

BLT.VideoControls.removeListeners = function () {
    console.log ('REMOVE CONTROL LISTENERS');

    playButton.removeEventListener ('click', BLT.VideoControls.handleControls);
    pauseButton.removeEventListener ('click', BLT.VideoControls.handleControls);
    soundOffButton.removeEventListener ('click', BLT.VideoControls.handleControls);
    soundOnButton.removeEventListener ('click', BLT.VideoControls.handleControls);

    removeEventListener ('hideControls', BLT.VideoControls.handleVideoEvents);
    removeEventListener ('showControls', BLT.VideoControls.handleVideoEvents);
    removeEventListener ('videoPlaying', BLT.VideoControls.handleVideoEvents);
    removeEventListener ('videoPaused', BLT.VideoControls.handleVideoEvents);
    removeEventListener ('videoMuted', BLT.VideoControls.handleVideoEvents);
    removeEventListener ('videoUnmuted', BLT.VideoControls.handleVideoEvents);
    removeEventListener ('killVideo', BLT.VideoControls.killControls);

    removeEventListener ('videoComplete', BLT.VideoControls.handleVideoComplete);

    videoTrack.removeEventListener ('click', BLT.VideoControls.handleControls);
    videoPlayer.removeEventListener ('timeupdate', BLT.VideoControls.handleProgressEvent);
    videoPlayer.removeEventListener ('canplay', BLT.VideoControls.videoReady);
};


BLT.VideoControls.videoReady = function (event) {
    // display controls
    show (videoControls);

    videoPlayer.removeEventListener ('canplay', BLT.VideoControls.videoReady);

    // store video's duration
    videoDuration = videoPlayer.duration;

    // if scrubber exists, set properties
    if (videoScrubber != null) {
        trackRect = videoTrack.getBoundingClientRect();
        trackWidth = trackRect.width;
        trackLeft = trackRect.left;
        trackRight = trackRect.right;
        trackOffsetLeft = videoTrack.offsetLeft;

        if (typeof scrubberLeft === 'undefined') scrubberLeft = scrubHandle.offsetLeft;
    }
};

BLT.VideoControls.handleControls = function (event) {
    var obj = event.currentTarget.id;

    switch (obj) {
        case 'playButton':
            dispatchEvent (BLT.Events.PLAY_VIDEO);
            if (videoScrubber != null && videoPlayer.currentTime == 0) videoProgress.style.width = 0;
            BLT.VideoControls.togglePlayButton (false);
            break;

        case 'pauseButton':
            dispatchEvent (BLT.Events.PAUSE_VIDEO);
            BLT.VideoControls.togglePlayButton (true);
            break;

        case 'soundOffButton':
            dispatchEvent (BLT.Events.UNMUTE_VIDEO);
            BLT.VideoControls.toggleMuteButton (false);
            break;

        case 'soundOnButton':
            dispatchEvent (BLT.Events.MUTE_VIDEO);
            BLT.VideoControls.toggleMuteButton (true);
            break;

        case 'scrubTrack':
            BLT.VideoControls.setScrubberPosition (event);
            break;
    }
};

BLT.VideoControls.handleVideoEvents = function (event) {
    switch (event.type) {
        case 'videoPlaying':
            BLT.VideoControls.togglePlayButton (false);
            break;

        case 'videoPaused':
            BLT.VideoControls.togglePlayButton (true);
            break;

        case 'hideControls':
            BLT.VideoControls.showHideControls ('hidden');
            break;

        case 'showControls':
            BLT.VideoControls.showHideControls ('visible');
            break;

        case 'videoMuted':
            BLT.VideoControls.toggleMuteButton (true);
            break;

        case 'videoUnmuted':
            BLT.VideoControls.toggleMuteButton (false);
            break;
    }
};

BLT.VideoControls.showHideControls = function (state) {
    videoControls.style.visibility = state;
};


BLT.VideoControls.setScrubberPosition = function (event) {
    if (!videoDuration) videoDuration = videoPlayer.duration;

    var currPos = event.clientX;
    var newPos = currPos - trackLeft;
    var posRatio = newPos / trackWidth;
    var newTime = videoDuration * posRatio;

    videoPlayer.currentTime = newTime;
    scrubHandle.style.left = (newPos - (scrubHandle.offsetWidth /2)) + "px";
    videoProgress.style.width = (currPos - trackLeft) + "px";
};


BLT.VideoControls.handleProgressEvent = function () {
    if (!videoDuration) videoDuration = videoPlayer.duration;

    // moves scrubber in relation to currentTime
    var currTime = videoPlayer.currentTime;
    var posRatio = currTime/videoDuration;
    var posOffset = trackWidth * posRatio;
    var scrubberPos = scrubberLeft + posOffset;

    var newPos = scrubberPos - (scrubHandle.offsetWidth /2);
    if (newPos < 0) newPos = scrubberPos;

    scrubHandle.style.left = newPos + "px";
    videoProgress.style.width = (scrubberPos - trackOffsetLeft) + "px";
};


BLT.VideoControls.togglePlayButton = function (playState) {
    if (playState === true) {
        show (playButton);
        hide (pauseButton);
    }
    else {
        hide (playButton);
        show (pauseButton);
    }
};


BLT.VideoControls.toggleMuteButton = function (muteState) {
    if (muteState === true) {
        show (soundOffButton);
        hide (soundOnButton);
    }
    else {
        hide (soundOffButton);
        show (soundOnButton);
    }
};


BLT.VideoControls.handleVideoComplete = function (event) {
    BLT.VideoControls.togglePlayButton (true);
};


BLT.VideoControls.killControls = function () {
    BLT.VideoControls.removeListeners();
    hide (videoControls);
};

var AD = AD || {};

var adContainer = getEl ('adContainer');
var $bgExits    = getEl ('exit');
var $tunein     = getEl ('lockup');


/** INITIALIZE AD
 *******************************************************************/
AD.initAd = function () {
    AD.addListeners();
    AD.setupAnimation();
    AD.checkDate();
    // INITIALIZE THE AD VENDOR API
    initVendor();
};


/** SETUP LISTENERS
 *******************************************************************/
AD.addListeners = function () {
    // ad events
    addEventListener ('adReady', AD.adReady);
    // Exit Events
    $bgExits.addEventListener ('click', AD.exitHandler);
    // for (var bgExitIndex = 0; bgExitIndex < $bgExits.length; bgExitIndex++) {
    //     $bgExits[bgExitIndex].addEventListener('click', AD.exitHandler);
    // }
};

// Exit handler for all click-outs
AD.exitHandler = function(event){
    var target = (event.currentTarget) ? event.currentTarget : event.srcElement;

    switch(target){
        case $bgExits:
        default:
            console.log("Exit");
            window.open(clickTag, '_blank');
            break;
    }
};

/** AD READY -- CALLED ONCE VENDOR API IS READY (EVENT DISPATCHED)
 *******************************************************************/
AD.adReady = function() {
    console.info ('AD READY');
    tlExpand.restart();
};

/** ANIMATION SETUP
 *******************************************************************/
var tlExpand = new TimelineLite({paused:true});
AD.setupAnimation = function() {
    tlExpand.addLabel("start", 0);
    tlExpand.addLabel("lockup", .6);
    tlExpand.addLabel("end", 8);

    tlExpand.from('.powder', 3, {scale:0.6, ease: Expo.easeOut}, 'start');
    tlExpand.from('.wrestlers', 3, {scale:0.8, ease: Expo.easeOut}, 'start');

    tlExpand.from('.logo', 1, {opacity:0, ease: Power0.easeNone}, 'lockup');
    tlExpand.from('.lockup', 1, {opacity:0, ease: Power0.easeNone}, 'lockup');
};

//////////////////////////////////////////////////////////////////////////////
///// Date Code ---------------
AD.checkDate = function () {
    console.log('date check');

    BLT.Tunein.addDate (2019, 10, 02, 'tonight');
    BLT.Tunein.addDate (2019, 10, 03, 'wednesdays');
    BLT.Tunein.addDate (2019, 10, 09, 'tonight');
    BLT.Tunein.addDate (2019, 10, 10, 'wednesdays');
    BLT.Tunein.addDate (2019, 10, 16, 'tonight');

    BLT.Tunein.parseDates ();
    // BLT.Tunein.parseDates (2019, 10, 16); // USE TO TEST DATES

    switch (BLT.Tunein.currentID) {

        case 'wednesdays':
            console.info('DATE - wednesdays');
            addClass($tunein, 'date3');
            break;

        case 'tonight':
            console.info('DATE - tonight');
            addClass($tunein, 'date2');
            break;

        default:
            console.info('DATE - Default');
            break;
    }
}

/** STARTUP
 *******************************************************************/
window.load = AD.initAd();
//# sourceMappingURL=../main.min.js.map
